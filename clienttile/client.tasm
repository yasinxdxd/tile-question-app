; program begins
jmp __start

@cfun void InitWindow i32 i32 ptr 
@cfun i8 WindowShouldClose 
@cfun void CloseWindow 
@cfun void BeginDrawing 
@cfun void EndDrawing 
@cfun void ClearBackground u32 
@cfun void SetTargetFPS i32 
@cfun f32 GetFrameTime 
@cfun void DrawRectangle i32 i32 i32 i32 u32 
@cfun void DrawCircle i32 i32 f32 u32 
@cfun void DrawLine i32 i32 i32 i32 u32 
@cfun i8 IsKeyDown i16 
@cfun void DrawText ptr i32 i32 i32 u64 
@cfun void SetRandomSeed u32 
@cfun i32 GetRandomValue i32 i32 
@cfun i32 GuiButtonTile f32 f32 f32 f32 ptr 
@cfun i32 GuiTextBoxTile f32 f32 f32 f32 ptr i32 i8 
@cfun void GuiSetStyle i32 i32 i32 
@cfun void GuiLoadStyle ptr 
@cfun i8 wsclient_init 
@cfun i8 wsclient_connect ptr ptr 
@cfun i8 wsclient_is_connected 
@cfun i32 wsclient_send ptr 
@cfun i32 wsclient_poll ptr u64 
@cfun void wsclient_disconnect 
proc func_printchr_
    store 0 ; param char c
    load 0 ; unsafe tasm statement
    putc ; unsafe tasm statement
    ret
endp

proc func_print_
    store 0 ; param string str
    load 0 ; unsafe tasm statement
    puts ; unsafe tasm statement
    ret
endp

proc func_printcarr_
    store 0 ; param char[] str
    load 0 ; unsafe tasm statement
    deref ; unsafe tasm statement
    puts ; unsafe tasm statement
    ret
endp

proc func_print_int_
    store 0 ; param int num
; if begin
    load 0
    push 0
    eq
    jz _1_0else0
    aloadc 0 ; "0\n"
    call func_print_
    ret
    jmp _1exit0
_1_0else0: 
_1exit0: 
; if end
; if begin
    load 0
    push 0
    lt
    jz _1_1else0
    aloadc 2 ; "-"
    call func_print_
    push 0
    load 0
    sub
    store 0 ; int num
    jmp _1exit1
_1_1else0: 
_1exit1: 
; if end
    ; sized arr initializer
    push 32
    push 1
    mult
    push 0
    halloc
    store 1 ; char[] buffer
    push 0
    store 2 ; int i
    load 0
    push 0
    gt
jz _1while_end0
_1while0:
    load 0
    push 10
    mod
    push '0'
    add
    load 1
    load 2
    push 1
    hset
    load 0
    push 10
    div
    store 0 ; int num
    load 2
    push 1
    add
    store 2 ; int i
    load 0
    push 0
    gt
jnz _1while0
_1while_end0:
    load 2
    push 1
    sub
    store 3 ; int j
    load 3
    push 0
    ge
jz _1for_end0
_1for0:
    load 1
    deref ; dereferance
    load 3
    push 1
    mult
    add
    derefb 1 ; dereferance
    call func_printchr_
    load 3
    dec ; --
    store 3
    load 3
    pop
    load 3
    push 0
    ge
jnz _1for0
_1for_end0:
    push 10
    call func_printchr_
    ret
endp

proc func_as_carray_
    store 0 ; param int[] arr
    load 0 ; unsafe tasm statement
    deref ; unsafe tasm statement
    ret
endp

proc func_strlen_
    store 0 ; param char[] str
    push 0
    store 1 ; int len
    push 0
    store 2 ; int i
    load 0
    deref ; dereferance
    load 2
    push 1
    mult
    add
    derefb 1 ; dereferance
    push 0
    eq
jz _1for_end1
_1for1:
    load 2
    store 1 ; int len
    load 2
    inc ; ++
    store 2
    load 2
    pop
    load 0
    deref ; dereferance
    load 2
    push 1
    mult
    add
    derefb 1 ; dereferance
    push 0
    eq
jnz _1for1
_1for_end1:
    load 1
    ret
endp

proc func_check_char_
    store 2 ; param char chr
    store 1 ; param int idx
    store 0 ; param char[] buff
; if begin
    load 0
    deref ; dereferance
    load 1
    push 1
    mult
    add
    derefb 1 ; dereferance
    load 2
    eq
    jz _1_2else0
    push 1
    ret
    jmp _1exit2
_1_2else0: 
_1exit2: 
; if end
    push 0
    ret
endp

proc func_check_QSTART_
    store 0 ; param char[] buff
    push 1
    store 1 ; bool result
    load 1
    load 0
    push 0
    push 'Q'
    call func_check_char_
    and
    store 1 ; bool result
    load 1
    load 0
    push 1
    push 'S'
    call func_check_char_
    and
    store 1 ; bool result
    load 1
    load 0
    push 2
    push 'T'
    call func_check_char_
    and
    store 1 ; bool result
    load 1
    load 0
    push 3
    push 'A'
    call func_check_char_
    and
    store 1 ; bool result
    load 1
    load 0
    push 4
    push 'R'
    call func_check_char_
    and
    store 1 ; bool result
    load 1
    load 0
    push 5
    push 'T'
    call func_check_char_
    and
    store 1 ; bool result
    load 1
    ret
endp

proc func_check_OKOK_
    store 0 ; param char[] buff
    push 1
    store 1 ; bool result
    load 1
    load 0
    push 0
    push 'O'
    call func_check_char_
    and
    store 1 ; bool result
    load 1
    load 0
    push 1
    push 'K'
    call func_check_char_
    and
    store 1 ; bool result
    load 1
    load 0
    push 2
    push 'O'
    call func_check_char_
    and
    store 1 ; bool result
    load 1
    load 0
    push 3
    push 'K'
    call func_check_char_
    and
    store 1 ; bool result
    load 1
    ret
endp

proc func_check_XEND_
    store 0 ; param char[] buff
    push 1
    store 1 ; bool result
    load 1
    load 0
    push 0
    push 'X'
    call func_check_char_
    and
    store 1 ; bool result
    load 1
    load 0
    push 1
    push 'E'
    call func_check_char_
    and
    store 1 ; bool result
    load 1
    load 0
    push 2
    push 'N'
    call func_check_char_
    and
    store 1 ; bool result
    load 1
    load 0
    push 3
    push 'D'
    call func_check_char_
    and
    store 1 ; bool result
    load 1
    ret
endp

proc func_seperate_lines_chrarr_then_draw_
    store 0 ; param char[] buff
    load 0
    call func_as_carray_
    push 30
    push 30
    push 14
    push 0xFFFFFFFF
    native 12 ; DrawText
    push 0
    gload 2
    push 1
    push 1
    hset
; if begin
    gload 4
    push 0
    eq
    jz _1_3else0
; if begin
    push 50.0
    push 150.0
    push 50.0
    push 50.0
    aloadc 4 ; "A"
    native 15 ; GuiButtonTile
    jz _2_3else0
; if begin
    native 21 ; wsclient_is_connected
    jz _3_3else0
    push 'A'
    gload 2
    push 0
    push 1
    hset
    gload 2
    call func_as_carray_
    native 22 ; wsclient_send
    push 1
    gstore 4 ; bool has_answered
    jmp _3exit3
_3_3else0: 
_3exit3: 
; if end
    jmp _2exit3
_2_3else0: 
_2exit3: 
; if end
; if begin
    push 100.0
    push 150.0
    push 50.0
    push 50.0
    aloadc 6 ; "B"
    native 15 ; GuiButtonTile
    jz _2_5else0
; if begin
    native 21 ; wsclient_is_connected
    jz _3_5else0
    push 'B'
    gload 2
    push 0
    push 1
    hset
    gload 2
    call func_as_carray_
    native 22 ; wsclient_send
    push 1
    gstore 4 ; bool has_answered
    jmp _3exit5
_3_5else0: 
_3exit5: 
; if end
    jmp _2exit5
_2_5else0: 
_2exit5: 
; if end
; if begin
    push 150.0
    push 150.0
    push 50.0
    push 50.0
    aloadc 8 ; "C"
    native 15 ; GuiButtonTile
    jz _2_7else0
; if begin
    native 21 ; wsclient_is_connected
    jz _3_7else0
    push 'C'
    gload 2
    push 0
    push 1
    hset
    gload 2
    call func_as_carray_
    native 22 ; wsclient_send
    push 1
    gstore 4 ; bool has_answered
    jmp _3exit7
_3_7else0: 
_3exit7: 
; if end
    jmp _2exit7
_2_7else0: 
_2exit7: 
; if end
; if begin
    push 200.0
    push 150.0
    push 50.0
    push 50.0
    aloadc 10 ; "D"
    native 15 ; GuiButtonTile
    jz _2_9else0
; if begin
    native 21 ; wsclient_is_connected
    jz _3_9else0
    push 'D'
    gload 2
    push 0
    push 1
    hset
    gload 2
    call func_as_carray_
    native 22 ; wsclient_send
    push 1
    gstore 4 ; bool has_answered
    jmp _3exit9
_3_9else0: 
_3exit9: 
; if end
    jmp _2exit9
_2_9else0: 
_2exit9: 
; if end
    jmp _1exit3
_1_3else0: 
_1exit3: 
; if end
    ret
endp

proc func_print_scores_
    store 0 ; param char[] buff
    load 0
    call func_as_carray_
    push 220
    push 80
    push 36
    push 0xFFFFFFFF
    native 12 ; DrawText
    ret
endp

proc func_run_game_
; if begin
    native 19 ; wsclient_init
    push 0
    eq
    jz _1_12else0
    ret
    jmp _1exit12
_1_12else0: 
_1exit12: 
; if end
; if begin
    aloadc 12 ; "127.0.0.1"
    aloadc 14 ; "7777"
    native 20 ; wsclient_connect
    push 0
    eq
    jz _1_13else0
    ret
    jmp _1exit13
_1_13else0: 
_1exit13: 
; if end
    push 0
    store 0 ; int i
    load 0
    gload 0
    lt
jz _1for_end2
_1for2:
    push 0
    gload 2
    load 0
    push 1
    hset
    push 0
    gload 3
    load 0
    push 1
    hset
    load 0
    inc ; ++
    store 0
    load 0
    pop
    load 0
    gload 0
    lt
jnz _1for2
_1for_end2:
    native 1 ; WindowShouldClose
    not ; !
jz _1while_end1
_1while1:
    gload 3
    call func_as_carray_
    gload 0
    push 1
    sub
    native 23 ; wsclient_poll
    store 1 ; int bytes
; if begin
    load 1
    push 0
    gt
    load 1
    gload 0
    lt
    and
    jz _2_14else0
    push 0
    gload 3
    load 1
    push 1
    hset
    jmp _2exit14
_2_14else0: 
_2exit14: 
; if end
    native 3 ; BeginDrawing
    push 0x222e27FF
    native 5 ; ClearBackground
; if begin
    gload 13
    gload 9
    eq
    jz _2_15else0
    gload 7
    gload 8
    push 24
    native 17 ; GuiSetStyle
; if begin
    push 50.0
    push 50.0
    push 300.0
    push 100.0
    gload 2
    call func_as_carray_
    gload 0
    push 1
    native 16 ; GuiTextBoxTile
    jz _3_15else0
    jmp _3exit15
_3_15else0: 
_3exit15: 
; if end
    gload 7
    gload 8
    push 16
    native 17 ; GuiSetStyle
; if begin
    push 150.0
    push 150.0
    push 100.0
    push 50.0
    aloadc 16 ; "Join The Game"
    native 15 ; GuiButtonTile
    jz _3_16else0
; if begin
    native 21 ; wsclient_is_connected
    jz _4_16else0
    gload 2
    call func_as_carray_
    native 22 ; wsclient_send
    push 0
    gload 2
    push 0
    push 1
    hset
    gload 10
    gstore 13 ; int game_state
    aloadc 18 ; "READY"
    native 22 ; wsclient_send
    push 0
    gload 3
    push 0
    push 1
    hset
    jmp _4exit16
_4_16else0: 
_4exit16: 
; if end
    jmp _3exit16
_3_16else0: 
_3exit16: 
; if end
    jmp _2exit15
_2_15else0: 
    gload 13
    gload 10
    eq
    jz _2_15else1
    aloadc 20 ; "Waiting for at least 3 players to come!"
    push 36
    gload 6
    push 2
    div
    push 28
    push 0xFFFFFFFF
    native 12 ; DrawText
; if begin
    gload 3
    call func_check_OKOK_
    jz _3_19else0
    gload 11
    gstore 13 ; int game_state
    push 0
    gload 3
    push 0
    push 1
    hset
    jmp _3exit19
_3_19else0: 
_3exit19: 
; if end
    jmp _2exit15
_2_15else1: 
    gload 13
    gload 11
    eq
    jz _2_15else2
; if begin
    gload 3
    call func_check_QSTART_
    jz _3_22else0
    push 0
    gstore 4 ; bool has_answered
    aloadc 22 ; "qstart: "
    call func_print_
    gload 4
    call func_print_int_
    push ' '
    gload 3
    push 0
    push 1
    hset
    push ' '
    gload 3
    push 1
    push 1
    hset
    push ' '
    gload 3
    push 2
    push 1
    hset
    push ' '
    gload 3
    push 3
    push 1
    hset
    push ' '
    gload 3
    push 4
    push 1
    hset
    push ' '
    gload 3
    push 5
    push 1
    hset
    jmp _3exit22
_3_22else0: 
    gload 3
    call func_check_XEND_
    jz _3_22else1
    gload 12
    gstore 13 ; int game_state
    aloadc 24 ; "GAME_STATE_END\n"
    call func_print_
    aloadc 26 ; "DONE"
    native 22 ; wsclient_send
    jmp _3exit22
_3_22else1: 
    gload 3
    call func_seperate_lines_chrarr_then_draw_
_3exit22: 
; if end
    jmp _2exit15
_2_15else2: 
    gload 13
    gload 12
    eq
    jz _2_15else3
    gload 3
    call func_print_scores_
    jmp _2exit15
_2_15else3: 
_2exit15: 
; if end
    native 4 ; EndDrawing
    native 1 ; WindowShouldClose
    not ; !
jnz _1while1
_1while_end1:
    ret
endp

proc func_main_
    store 0 ; param int argc
    gload 5
    gload 6
    aloadc 28 ; "TCP Client"
    native 0 ; InitWindow
    push 60
    native 6 ; SetTargetFPS
    aloadc 30 ; "style_dark.rgs"
    native 18 ; GuiLoadStyle
    call func_run_game_
    aloadc 32 ; "QUIT"
    native 22 ; wsclient_send
    native 24 ; wsclient_disconnect
    native 2 ; CloseWindow
    ret
endp

__start:
; global variables
    push 256
    gstore 0 ; int MAX_MSG_LEN
    push 32
    gstore 1 ; int MAX_MSG_CHC_LEN
    ; sized arr initializer
    gload 0
    push 1
    mult
    push 0
    halloc
    gstore 2 ; char[] message
    ; sized arr initializer
    gload 0
    push 1
    mult
    push 0
    halloc
    gstore 3 ; char[] recv_buf
    push 1
    gstore 4 ; bool has_answered
    push 600
    gstore 5 ; int screenWidth
    push 300
    gstore 6 ; int screenHeight
    push 0
    gstore 7 ; int DEFAULT
    push 16
    gstore 8 ; int TEXT_SIZE
    push 0
    gstore 9 ; int GAME_STATE_JOIN
    push 1
    gstore 10 ; int GAME_STATE_WAITING
    push 2
    gstore 11 ; int GAME_STATE_GAME
    push 3
    gstore 12 ; int GAME_STATE_END
    gload 9
    gstore 13 ; int game_state


push 0 ; argc
call func_main_

hlt
@data "0\n"
@data 0x003
@data "-"
@data 0x001
@data "A"
@data 0x001
@data "B"
@data 0x001
@data "C"
@data 0x001
@data "D"
@data 0x001
@data "127.0.0.1"
@data 0x009
@data "7777"
@data 0x004
@data "Join The Game"
@data 0x00d
@data "READY"
@data 0x005
@data "Waiting for at least 3 players to come!"
@data 0x0027
@data "qstart: "
@data 0x008
@data "GAME_STATE_END\n"
@data 0x0010
@data "DONE"
@data 0x004
@data "TCP Client"
@data 0x00a
@data "style_dark.rgs"
@data 0x00e
@data "QUIT"
@data 0x004
